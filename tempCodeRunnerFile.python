from colorama import Fore, Style, init
init(autoreset=True)

ROWS = 6
COLUMNS = 7

# Create empty board
def create_board():
    return [[" " for _ in range(COLUMNS)] for _ in range(ROWS)]

# Print the board with colors
def print_board(board):
    print()
    for row in board:
        print("|", end=" ")
        for cell in row:
            if cell == "X":
                print(Fore.RED + "X", end=" ")
            elif cell == "O":
                print(Fore.YELLOW + "O", end=" ")
            else:
                print(" ", end=" ")
            print("|", end=" ")
        print()
    print("  " + "   ".join(Fore.CYAN + str(i) for i in range(COLUMNS)))
    print()

# Drop piece into column
def drop_piece(board, column, piece):
    for row in reversed(board):
        if row[column] == " ":
            row[column] = piece
            return True
    return False

# Check for win
def check_win(board, piece):
    # Horizontal
    for row in range(ROWS):
        for col in range(COLUMNS - 3):
            if all(board[row][col + i] == piece for i in range(4)):
                return True
    # Vertical
    for row in range(ROWS - 3):
        for col in range(COLUMNS):
            if all(board[row + i][col] == piece for i in range(4)):
                return True
    # Diagonal /
    for row in range(3, ROWS):
        for col in range(COLUMNS - 3):
            if all(board[row - i][col + i] == piece for i in range(4)):
                return True
    # Diagonal \
    for row in range(ROWS - 3):
        for col in range(COLUMNS - 3):
            if all(board[row + i][col + i] == piece for i in range(4)):
                return True
    return False

# Check if board is full
def is_full(board):
    return all(cell != " " for row in board for cell in row)

# Main game loop
def play_game():
    board = create_board()
    game_over = False
    current_player = "X"

    print(Fore.MAGENTA + Style.BRIGHT + "\nðŸŽ® Welcome to Connect Four - Terminal Edition ðŸŽ®\n")
    print(Fore.GREEN + "Player X: " + Fore.RED + "Red")
    print(Fore.GREEN + "Player O: " + Fore.YELLOW + "Yellow\n")

    while not game_over:
        print_board(board)
        try:
            col = int(input(Fore.CYAN + f"Player {current_player}, choose column (0-{COLUMNS - 1}): "))
            if col < 0 or col >= COLUMNS:
                print(Fore.RED + "Invalid column! Please try again.")
                continue
        except ValueError:
            print(Fore.RED + "Invalid input! Enter a number.")
            continue

        if drop_piece(board, col, current_player):
            if check_win(board, current_player):
                print_board(board)
                color = Fore.RED if current_player == "X" else Fore.YELLOW
                print(color + Style.BRIGHT + f"ðŸŽ‰ Player {current_player} wins the game! ðŸŽ‰\n")
                game_over = True
            elif is_full(board):
                print_board(board)
                print(Fore.MAGENTA + Style.BRIGHT + "It's a draw! ðŸŸ° No more moves left.\n")
                game_over = True
            else:
                current_player = "O" if current_player == "X" else "X"
        else:
            print(Fore.RED + "That column is full. Choose another one.")

# Run the game
if __name__ == "__main__":
    play_game()
from colorama import Fore, Style, init
init(autoreset=True)

ROWS = 6
COLUMNS = 7

# Create empty board
def create_board():
    return [[" " for _ in range(COLUMNS)] for _ in range(ROWS)]

# Print the board with colors
def print_board(board):
    print()
    for row in board:
        print("|", end=" ")
        for cell in row:
            if cell == "X":
                print(Fore.RED + "X", end=" ")
            elif cell == "O":
                print(Fore.YELLOW + "O", end=" ")
            else:
                print(" ", end=" ")
            print("|", end=" ")
        print()
    print("  " + "   ".join(Fore.CYAN + str(i) for i in range(COLUMNS)))
    print()

# Drop piece into column
def drop_piece(board, column, piece):
    for row in reversed(board):
        if row[column] == " ":
            row[column] = piece
            return True
    return False

# Check for win
def check_win(board, piece):
    # Horizontal
    for row in range(ROWS):
        for col in range(COLUMNS - 3):
            if all(board[row][col + i] == piece for i in range(4)):
                return True
    # Vertical
    for row in range(ROWS - 3):
        for col in range(COLUMNS):
            if all(board[row + i][col] == piece for i in range(4)):
                return True
    # Diagonal /
    for row in range(3, ROWS):
        for col in range(COLUMNS - 3):
            if all(board[row - i][col + i] == piece for i in range(4)):
                return True
    # Diagonal \
    for row in range(ROWS - 3):
        for col in range(COLUMNS - 3):
            if all(board[row + i][col + i] == piece for i in range(4)):
                return True
    return False

# Check if board is full
def is_full(board):
    return all(cell != " " for row in board for cell in row)

# Main game loop
def play_game():
    board = create_board()
    game_over = False
    current_player = "X"

    print(Fore.MAGENTA + Style.BRIGHT + "\nðŸŽ® Welcome to Connect Four - Terminal Edition ðŸŽ®\n")
    print(Fore.GREEN + "Player X: " + Fore.RED + "Red")
    print(Fore.GREEN + "Player O: " + Fore.YELLOW + "Yellow\n")

    while not game_over:
        print_board(board)
        try:
            col = int(input(Fore.CYAN + f"Player {current_player}, choose column (0-{COLUMNS - 1}): "))
            if col < 0 or col >= COLUMNS:
                print(Fore.RED + "Invalid column! Please try again.")
                continue
        except ValueError:
            print(Fore.RED + "Invalid input! Enter a number.")
            continue

        if drop_piece(board, col, current_player):
            if check_win(board, current_player):
                print_board(board)
                color = Fore.RED if current_player == "X" else Fore.YELLOW
                print(color + Style.BRIGHT + f"ðŸŽ‰ Player {current_player} wins the game! ðŸŽ‰\n")
                game_over = True
            elif is_full(board):
                print_board(board)
                print(Fore.MAGENTA + Style.BRIGHT + "It's a draw! ðŸŸ° No more moves left.\n")
                game_over = True
            else:
                current_player = "O" if current_player == "X" else "X"
        else:
            print(Fore.RED + "That column is full. Choose another one.")

# Run the game
if __name__ == "__main__":
    play_game()

